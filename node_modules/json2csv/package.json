{
  "name": "json2csv",
  "preferGlobal": "true",
  "version": "3.0.1",
  "description": "Convert JSON to CSV",
  "keywords": [
    "json",
    "to",
    "csv",
    "export",
    "convert",
    "parse"
  ],
  "author": {
    "name": "Mirco Zeiss",
    "email": "mirco.zeiss@gmail.com"
  },
  "license": "MIT",
  "bin": {
    "json2csv": "./bin/json2csv.js"
  },
  "main": "./lib/json2csv.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/zemirco/json2csv"
  },
  "scripts": {
    "test": "eslint . && node test | tap-spec",
    "test-coverage": "istanbul cover test/index.js --report lcovonly | tap-spec"
  },
  "dependencies": {
    "cli-table": "^0.3.1",
    "commander": "^2.8.1",
    "debug": "^2.2.0",
    "lodash.get": "^3.7.0",
    "path-is-absolute": "^1.0.0"
  },
  "devDependencies": {
    "async": "^1.4.2",
    "eslint": "^1.0.0-rc-1",
    "istanbul": "^0.3.14",
    "tap-spec": "^4.1.0",
    "tape": "^4.0.0"
  },
  "readme": "# json2csv\n\nConverts json into csv with column titles and proper line endings. Can be used as a module and from the command line.\n\n[![npm version][npm-badge]][npm-badge-url]\n[![Build Status][travis-badge]][travis-badge-url]\n[![Coverage Status][coveralls-badge]][coveralls-badge-url]\n\n## How to use\n\nInstall\n\n```bash\n$ npm install json2csv --save\n```\n\nInclude the module and run\n\n```javascript\nvar json2csv = require('json2csv');\nvar fields = ['field1', 'field2', 'field3'];\n\njson2csv({ data: myData, fields: fields }, function(err, csv) {\n  if (err) console.log(err);\n  console.log(csv);\n});\n```\n\nor [use it from the CLI](https://github.com/zemirco/json2csv#command-line-interface).\n\n\n\n## Features\n\n- Uses proper line endings on various operating systems\n- Handles double quotes\n- Allows custom column selection\n- Allows specifying nested properties\n- Reads column selection from file\n- Pretty writing to stdout\n- Supports optional custom delimiters\n- Supports optional custom eol value\n- Supports optional custom quotation marks\n- Not create CSV column title by passing hasCSVColumnTitle: false, into params.\n- If field is not exist in object then the field value in CSV will be empty.\n\n## Use as a module\n\n### Available Options\n\n- `options` - **Required**; Options hash.\n  - `data` - **Required**; Array of JSON objects.\n  - `fields` - Array of Objects/Strings. Defaults to toplevel JSON attributes. See example below.\n  - `fieldNames` Array of Strings, names for the fields at the same indexes.\n    Must be the same length as `fields` array. (Optional. Maintained for backwards compatibility. Use `fields` config object for more features)\n  - `del` - String, delimiter of columns. Defaults to `,` if not specified.\n  - `defaultValue` - String, default value to use when missing data. Defaults to `<empty>` if not specified. (Overridden by `fields[].default`)\n  - `quotes` - String, quotes around cell values and column names. Defaults to `\"` if not specified.\n  - `hasCSVColumnTitle` - Boolean, determines whether or not CSV file will contain a title column. Defaults to `true` if not specified.\n  - `eol` - String, it gets added to each row of data. Defaults to `` if not specified.\n  - `newLine` - String, overrides the default OS line ending (i.e. `\\n` on Unix and `\\r\\n` on Windows).\n- `callback` - **Required**; `function (error, csvString) {}`. To create a promise, you can use `var toCSV = Bluebird.promisify(json2csv)`, see [Bluebird] docs.\n\n#### Example `fields` option\n``` javascript\n{\n  fields: [\n    // Supports label -> simple path\n    {\n      label: 'some label', // (optional, column will be labeled 'path.to.something' if not defined)\n      value: 'path.to.something', // data.path.to.something\n      default: 'NULL' // default if value is not found (optional, overrides `defaultValue` for column)\n    },\n\n    // Supports label -> derived value\n    {\n      label: 'some label', // Supports duplicate labels (required, else your column will be labeled [function])\n      value: function(row) {\n        return row.path1 + row.path2;\n      },\n      default: 'NULL' // default if value fn returns falsy\n    },\n\n    // Support pathname -> pathvalue\n    'simplepath' // equivalent to {value:'simplepath'}\n    'path.to.value' // also equivalent to {label:'path.to.value', value:'path.to.value'}\n  ]\n}\n```\n\n### Example 1\n\n```javascript\nvar json2csv = require('json2csv');\nvar fields = ['car', 'price', 'color'];\nvar myCars = [\n  {\n    \"car\": \"Audi\",\n    \"price\": 40000,\n    \"color\": \"blue\"\n  }, {\n    \"car\": \"BMW\",\n    \"price\": 35000,\n    \"color\": \"black\"\n  }, {\n    \"car\": \"Porsche\",\n    \"price\": 60000,\n    \"color\": \"green\"\n  }\n];\n\njson2csv({ data: myCars, fields: fields }, function(err, csv) {\n  if (err) console.log(err);\n  fs.writeFile('file.csv', csv, function(err) {\n    if (err) throw err;\n    console.log('file saved');\n  });\n});\n```\n\nThe content of the \"file.csv\" should be\n\n```\ncar, price, color\n\"Audi\", 40000, \"blue\"\n\"BMW\", 35000, \"black\"\n\"Porsche\", 60000, \"green\"\n```\n\n### Example 2\n\nSimilarly to [mongoexport](http://www.mongodb.org/display/DOCS/mongoexport) you can choose which fields to export\n\n```javascript\nvar json2csv = require('json2csv');\nvar fields = ['car', 'color'];\n\njson2csv({ data: myCars, fields: fields }, function(err, csv) {\n  if (err) console.log(err);\n  console.log(csv);\n});\n```\n\nResults in\n\n```\ncar, color\n\"Audi\", \"blue\"\n\"BMW\", \"black\"\n\"Porsche\", \"green\"\n```\n\n### Example 3\n\nUse a custom delimiter to create tsv files. Add it as the value of the del property on the parameters:\n\n```javascript\nvar json2csv = require('json2csv');\nvar fields = ['car', 'price', 'color'];\n\njson2csv({ data: myCars, fields: fields, del: '\\t' }, function(err, tsv) {\n  if (err) console.log(err);\n  console.log(tsv);\n});\n```\n\nWill output:\n\n```\ncar price color\n\"Audi\"  10000 \"blue\"\n\"BMW\" 15000 \"red\"\n\"Mercedes\"  20000 \"yellow\"\n\"Porsche\" 30000 \"green\"\n```\n\nIf no delimiter is specified, the default `,` is used\n\n### Example 4\n\nYou can choose custom column names for the exported file.\n\n```javascript\nvar json2csv = require('json2csv');\nvar fields = ['car', 'price'];\nvar fieldNames = ['Car Name', 'Price USD'];\n\njson2csv({ data: myCars, fields: fields, fieldNames: fieldNames }, function(err, csv) {\n  if (err) console.log(err);\n  console.log(csv);\n});\n```\n\n### Example 5\n\nYou can choose custom quotation marks.\n\n```javascript\nvar json2csv = require('json2csv');\nvar fields = ['car', 'price'];\nvar fieldNames = ['Car Name', 'Price USD'];\nvar opts = {\n  data: myCars,\n  fields: fields,\n  fieldNames: fieldNames,\n  quotes: ''\n};\n\njson2csv(opts, function(err, csv) {\n  if (err) console.log(err);\n  console.log(csv);\n});\n```\n\nResults in\n\n```\nCar Name, Price USD\nAudi, 10000\nBMW, 15000\nPorsche, 30000\n```\n\n### Example 6\n\nYou can also specify nested properties using dot notation.\n\n```javascript\nvar json2csv = require('json2csv');\nvar fields = ['car.make', 'car.model', 'price', 'color'];\nvar myCars = [\n  {\n    \"car\": {\"make\": \"Audi\", \"model\": \"A3\"},\n    \"price\": 40000,\n    \"color\": \"blue\"\n  }, {\n    \"car\": {\"make\": \"BMW\", \"model\": \"F20\"},\n    \"price\": 35000,\n    \"color\": \"black\"\n  }, {\n    \"car\": {\"make\": \"Porsche\", \"model\": \"9PA AF1\"},\n    \"price\": 60000,\n    \"color\": \"green\"\n  }\n];\n\njson2csv({ data: myCars, fields: fields }, function(err, csv) {\n  if (err) console.log(err);\n  fs.writeFile('file.csv', csv, function(err) {\n    if (err) throw err;\n    console.log('file saved');\n  });\n});\n```\n\nThe content of the \"file.csv\" should be\n\n```\ncar.make, car.model, price, color\n\"Audi\", \"A3\", 40000, \"blue\"\n\"BMW\", \"F20\", 35000, \"black\"\n\"Porsche\", \"9PA AF1\", 60000, \"green\"\n```\n\n\n\n## Command Line Interface\n\n`json2csv` can also be called from the command line if installed with `-g`.\n\n```bash\nUsage: json2csv [options]\n\n  Options:\n\n    -h, --help                   output usage information\n    -V, --version                output the version number\n    -i, --input <input>          Path and name of the incoming json file.\n    -o, --output [output]        Path and name of the resulting csv file. Defaults to console.\n    -f, --fields <fields>        Specify the fields to convert.\n    -l, --fieldList [list]       Specify a file with a list of fields to include. One field per line.\n    -d, --delimiter [delimiter]  Specify a delimiter other than the default comma to use.\n    -e, --eol [value]            Specify an EOL value after each row.\n    -z, --newLine [value]        Specify an new line value for separating rows.\n    -q, --quote [value]          Specify an alternate quote value.\n    -n, --no-header              Disable the column name header\n    -L, --ldjson                 Treat the input as Line-Delimited JSON.\n    -p, --pretty                 Use only when printing to console. Logs output in pretty tables.\n```\n\nAn input file `-i` and fields `-f` are required. If no output `-o` is specified the result is logged to the console.\nUse `-p` to show the result in a beautiful table inside the console.\n\n### CLI examples\n\n#### Input file and specify fields\n\n```bash\n$ json2csv -i input.json -f carModel,price,color\n```\n\n```\ncarModel,price,color\n\"Audi\",10000,\"blue\"\n\"BMW\",15000,\"red\"\n\"Mercedes\",20000,\"yellow\"\n\"Porsche\",30000,\"green\"\n```\n\n#### Input file, specify fields and use pretty logging\n\n```bash\n$ json2csv -i input.json -f carModel,price,color -p\n```\n\n![Screenshot](https://s3.amazonaws.com/zeMirco/github/json2csv/json2csv-pretty.png)\n\n#### Input file, specify fields and write to file\n\n```bash\n$ json2csv -i input.json -f carModel,price,color -o out.csv\n```\n\nContent of `out.csv` is\n\n```\ncarModel,price,color\n\"Audi\",10000,\"blue\"\n\"BMW\",15000,\"red\"\n\"Mercedes\",20000,\"yellow\"\n\"Porsche\",30000,\"green\"\n```\n\n#### Input file, use field list and write to file\n\nThe file `fieldList` contains\n\n```\ncarModel\nprice\ncolor\n```\n\nUse the following command with the `-l` flag\n\n```bash\n$ json2csv -i input.json -l fieldList -o out.csv\n```\n\nContent of `out.csv` is\n\n```\ncarModel,price,color\n\"Audi\",10000,\"blue\"\n\"BMW\",15000,\"red\"\n\"Mercedes\",20000,\"yellow\"\n\"Porsche\",30000,\"green\"\n```\n\n#### Read from stdin\n\n```bash\n$ json2csv -f price\n[{\"price\":1000},{\"price\":2000}]\n```\n\nHit <kbd>Enter</kbd> and afterwards <kbd>CTRL</kbd> + <kbd>D</kbd> to end reading from stdin. The terminal should show\n\n```\nprice\n1000\n2000\n```\n\n#### Appending to existing CSV\n\nSometimes you want to add some additional rows with the same columns.\nThis is how you can do that.\n\n```bash\n# Initial creation of csv with headings\n$ json2csv -i test.json -f name,version > test.csv\n# Append additional rows\n$ json2csv -i test.json -f name,version --no-header >> test.csv\n```\n\n## Testing\n\nRun\n\n```bash\n$ npm test\n```\n\n## Contributors\n\nInstall require packages for development run following command under json2csv dir.\n\nRun\n\n```bash\n$ npm install\n```\n\nCould you please make sure code is formatted and test passed before submit Pull Requests?\n\nSee Testing and Formatting json2csv above.\n\n## But I want streams!\n\nCheck out my other module [json2csv-stream](https://github.com/zemirco/json2csv-stream). It transforms an incoming\nstream containing `json` data into an outgoing `csv` stream.\n\n## Similar Projects\n\n* [Papa Parse](http://papaparse.com/)\n\n## License\n\nSee [LICENSE.md](LICENSE.md).\n\n[npm-badge]: https://badge.fury.io/js/json2csv.svg\n[npm-badge-url]: http://badge.fury.io/js/json2csv\n[travis-badge]: https://travis-ci.org/zemirco/json2csv.svg\n[travis-badge-url]: https://travis-ci.org/zemirco/json2csv\n[coveralls-badge]: https://coveralls.io/repos/zemirco/json2csv/badge.svg?branch=master\n[coveralls-badge-url]: https://coveralls.io/r/zemirco/json2csv?branch=master\n[Bluebird]: http://bluebirdjs.com/docs/api/promise.promisify.html\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zemirco/json2csv/issues"
  },
  "_id": "json2csv@3.0.1",
  "dist": {
    "shasum": "db410c0248a4e31d554cbdcb70ac168a831ae02e"
  },
  "_from": "json2csv@latest",
  "_resolved": "https://registry.npmjs.org/json2csv/-/json2csv-3.0.1.tgz"
}
